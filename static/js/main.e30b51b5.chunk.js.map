{"version":3,"sources":["components/Controls.js","components/Timer.js","components/ControlMinutes.js","App.js","actions/actionCreators.js","actions/actionTypes.js","serviceWorker.js","reducers/clockReducer.js","index.js"],"names":["Controls","props","icon","paused","className","aria-hidden","onClick","e","onControlClick","id","Timer","minutes","seconds","sessionType","parseInt","userSession","userBreak","ControlMinutes","style","textTransform","type","sessionRunning","onIncrement","disabled","Math","floor","session","onDecrement","App","handleIncrementClick","currentTarget","split","increment","handleDecrementClick","decrement","handleControlClick","startStop","state","sessionTimerRunning","pauseTimer","startTimer","resetTimer","clearInterval","intervalId","beepSound","pause","currentTime","reset","runTimer","timerType","sType","run","play","break","t","setInterval","countdown","setIntervalID","pSettings","href","title","target","color","this","userSetSession","userSetBreak","timerPaused","showMilliseconds","fontSize","alpha","size","weight","preload","src","ref","audio","Component","connect","dispatch","actionCreator","Boolean","window","location","hostname","match","initialState","clockReducer","action","enhancers","compose","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e30b51b5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Controls = props => {\r\n  const icon = props.paused\r\n    ? <i className=\"fa fa-play-circle fa-2x\" aria-hidden=\"true\"></i>\r\n    : <i className=\"fa fa-pause-circle fa-2x\" aria-hidden=\"true\"></i>\r\n  return (\r\n    <div>\r\n      <button onClick={(e) => props.onControlClick(e)} id=\"start_stop\" className=\"control-button\">\r\n        {icon}\r\n      </button>\r\n      <button onClick={(e) => props.onControlClick(e)} id=\"reset\" className=\"control-button control-button2\">\r\n        <i className=\"fa fa-refresh fa-2x\" aria-hidden=\"true\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n\r\n","import React from 'react';\r\n\r\nconst Timer = props => {\r\n  let minutes, seconds\r\n\r\n  if (props.sessionType === \"session\") {\r\n    minutes = parseInt(props.userSession / 60, 10);\r\n    seconds = parseInt(props.userSession % 60, 10);\r\n  } else if (props.sessionType === \"break\") {\r\n    minutes = parseInt(props.userBreak / 60, 10);\r\n    seconds = parseInt(props.userBreak % 60, 10);\r\n  }\r\n\r\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n  return (\r\n    <div id=\"time-left\">\r\n      {minutes + \":\" + seconds}\r\n    </div>\r\n  )\r\n\r\n};\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\nconst ControlMinutes = props => {\r\n  return (\r\n    <div>\r\n      <div style={{ textTransform: 'capitalize' }}\r\n        id={props.type + \"-label\"}>{props.type} Length</div>\r\n\r\n      <div className=\"length-control\">\r\n        <div className=\"arrow-button\">\r\n          <button\r\n            className={props.sessionRunning ? \"pulse disabled\" : \"pulse\"}\r\n            onClick={(e) => props.onIncrement(e)}\r\n            id={props.type + \"-increment\"}\r\n            disabled={props.sessionRunning && !props.paused}>\r\n            <i className=\"fa fa-arrow-up fa-2x\" aria-hidden=\"true\" />\r\n          </button>\r\n        </div>\r\n\r\n        <div id={props.type + \"-length\"}>{Math.floor(props.session / 60)}</div>\r\n\r\n        <div className=\"arrow-button\">\r\n          <button\r\n            className={props.sessionRunning ? \"pulse disabled\" : \"pulse\"}\r\n            onClick={(e) => props.onDecrement(e)}\r\n            id={props.type + \"-decrement\"}\r\n            disabled={props.sessionRunning && !props.paused}>\r\n            <i className=\"fa fa-arrow-down fa-2x\" aria-hidden=\"true\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlMinutes;","import React, { Component } from 'react';\nimport './App.css';\nimport Controls from './components/Controls';\nimport Timer from './components/Timer';\nimport ControlMinutes from './components/ControlMinutes';\nimport { connect } from 'react-redux';\nimport * as actionCreator from './actions/actionCreators';\nimport ReactCountdownClock from 'react-countdown-clock'\n\n\nclass App extends Component {\n\n  handleIncrementClick = (e) => {\n    const type = e.currentTarget.id.split(\"-\")\n    const [timerType] = type; //break or session\n    // eslint-disable-next-line\n    const inc = timerType === \"session\"\n      ? this.props.increment(\"session\")\n      : this.props.increment(\"break\")\n  }\n\n  handleDecrementClick = (e) => {\n    const type = e.currentTarget.id.split(\"-\")\n    const [timerType] = type; //break or session\n    // eslint-disable-next-line\n    const inc = timerType === \"session\"\n      ? this.props.decrement(\"session\")\n      : this.props.decrement(\"break\")\n  }\n\n  handleControlClick = (e) => {\n    if (e.currentTarget.id === \"start_stop\") {\n      this.props.startStop()\n      if (this.props.state.sessionType === \"session\") {\n        this.props.state.sessionTimerRunning\n          ? this.pauseTimer()\n          : this.startTimer(\"session\");\n      } else {\n        this.props.state.sessionTimerRunning\n          ? this.pauseTimer()\n          : this.startTimer(\"break\");\n      }\n    } else if (e.currentTarget.id === \"reset\") {\n      this.resetTimer();\n    }\n  }\n\n  resetTimer = () => {\n    clearInterval(this.props.state.intervalId)\n    this.beepSound.pause()\n    this.beepSound.currentTime = 0;\n    this.props.reset()\n  }\n\n  runTimer = (timerType) => {\n    let sType = timerType === \"session\" ? \"session\" : \"break\"\n    if (timerType === \"session\") {\n      this.props.run(sType)\n      if (this.props.state.session < 0) {\n        clearInterval(this.props.state.intervalId);\n        this.props.pause(sType)\n        this.beepSound.play()\n        this.startTimer(\"break\")\n      }\n    } else if (timerType === \"break\") {\n      this.props.run(sType)\n      if (this.props.state.break < 0) {\n        clearInterval(this.props.state.intervalId);\n        this.props.pause(sType)\n        this.beepSound.play()\n        this.startTimer(\"session\")\n      }\n    }\n  }\n\n  startTimer = (t) => {\n    let intervalId = setInterval(() => {\n      this.props.countdown(t)\n      this.runTimer(t)\n    }, 1000)\n    this.props.setIntervalID(intervalId)\n  }\n\n  pauseTimer = () => {\n    this.props.pSettings();\n    clearInterval(this.props.state.intervalId)\n  }\n\n  render() {\n    return (\n      <div id=\"wrapper\">\n        <section className=\"container-social\">\n          <div className=\"text-right\">\n            <ul className=\"social-list\">\n              <li>\n                <a href=\"https://www.linkedin.com/in/sonyacooley/\" title=\"linkedin\" target=\"blank\"><i\n                  className=\"fa fa-linkedin\"></i></a>\n              </li>\n              <li>\n                <a href=\"https://github.com/Sonnerz\" title=\"github\" target=\"blank\"><i className=\"fa fa-github-square\"></i></a>\n              </li>\n              <li>\n                <a href=\"https://www.freecodecamp.org/sonnerz\" title=\"free code camp\" target=\"blank\"><i\n                  className=\"fa fa-free-code-camp\"></i></a>\n              </li>\n              <li>\n                <a href=\"https://sonnerz.github.io\" title=\"portfolio\" target=\"blank\"><i className=\"fa fa-briefcase\"></i></a>\n              </li>\n            </ul>\n          </div>\n        </section>\n        <h1>Pomodoro Clock</h1>\n        <div id=\"app-container\">\n\n          <div id=\"timer-component\">\n\n            <ReactCountdownClock\n              color=\"#012705\"\n              seconds={this.props.state.sessionType === \"session\"\n                ? this.props.state.userSetSession : this.props.state.userSetBreak}\n              paused={this.props.state.timerPaused}\n              showMilliseconds={false}\n              fontSize={\"0px\"}\n              alpha={0.6}\n              size={300}\n              weight={10}\n            />\n\n            <div id=\"timer-clock\">\n              <Timer\n                userSession={this.props.state.session}\n                userBreak={this.props.state.break}\n                sessionType={this.props.state.sessionType}\n              />\n            </div>\n            <div id=\"timer-label\">\n              {this.props.state.sessionType === \"session\" ? \"Session\" : \"Break\"}\n            </div>\n\n          </div>\n\n          <div className=\"length-controls\">\n            <div id=\"session-component\">\n              <ControlMinutes\n                onIncrement={this.handleIncrementClick}\n                onDecrement={this.handleDecrementClick}\n                session={this.props.state.userSetSession}\n                type={\"session\"}\n                sessionRunning={this.props.state.sessionTimerRunning}\n                sessionType={this.props.state.sessionType} />\n            </div>\n            <div id=\"break-component\">\n              <ControlMinutes\n                onIncrement={this.handleIncrementClick}\n                onDecrement={this.handleDecrementClick}\n                session={this.props.state.userSetBreak}\n                type={\"break\"}\n                sessionRunning={this.props.state.sessionTimerRunning}\n                sessionType={this.props.state.sessionType} />\n            </div>\n\n          </div>\n\n          <div id=\"controls-component\">\n            <Controls\n              onControlClick={this.handleControlClick}\n              paused={this.props.state.timerPaused}\n              sessionType={this.props.state.sessionType} />\n          </div>\n          <div id=\"tomato\"></div>\n          <audio id=\"beep\" preload=\"auto\"\n            src=\"https://goo.gl/65cBl1\"\n            ref={(audio) => { this.beepSound = audio; }} />\n\n        </div>\n      </div >\n    );\n  }\n}\n\n//REACT-REDUX///////////////////////////////////////////\n\nlet mapStateToProps = (state) => { return { state } };\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    increment: (timerType) => dispatch(actionCreator.increment(timerType)),\n    decrement: (timerType) => dispatch(actionCreator.decrement(timerType)),\n    reset: () => dispatch(actionCreator.reset()),\n    startStop: () => dispatch(actionCreator.start_stop()),\n    countdown: (timerType) => dispatch(actionCreator.countdown(timerType)),\n    setIntervalID: (id) => dispatch(actionCreator.setIntervalID(id)),\n    run: (timerType) => dispatch(actionCreator.runTimer(timerType)),\n    pause: (timerType) => dispatch(actionCreator.pauseTimer(timerType)),\n    pSettings: () => dispatch(actionCreator.pauseSettings())\n\n  }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionType from './actionTypes';\r\n\r\n\r\n/* ACTION CREATOR */\r\nexport const setIntervalID = (intervalId) => {\r\n  return {\r\n    type: actionType.SET_INTERVAL_ID,\r\n    intervalId: intervalId\r\n  };\r\n};\r\n\r\n\r\nexport const increment = (timerType) => {\r\n  return {\r\n    type: actionType.INCREMENT,\r\n    timerType: timerType\r\n  };\r\n};\r\n\r\n\r\nexport const decrement = (timerType) => {\r\n  return {\r\n    type: actionType.DECREMENT,\r\n    timerType: timerType\r\n  };\r\n};\r\n\r\n\r\nexport const reset = () => {\r\n  return {\r\n    type: actionType.RESET\r\n  };\r\n};\r\n\r\nexport const start_stop = () => {\r\n  return {\r\n    type: actionType.START_STOP\r\n  };\r\n};\r\n\r\n\r\nexport const countdown = (timerType) => {\r\n  return {\r\n    type: actionType.COUNTDOWN,\r\n    timerType: timerType\r\n  };\r\n};\r\n\r\n\r\nexport const runTimer = (timerType) => {\r\n  return {\r\n    type: actionType.RUN_TIMER,\r\n    timerType: timerType\r\n  };\r\n};\r\n\r\nexport const pauseTimer = (timerType) => {\r\n  return {\r\n    type: actionType.PAUSE_TIMER,\r\n    timerType: timerType\r\n  };\r\n};\r\n\r\n\r\nexport const pauseSettings = () => {\r\n  return {\r\n    type: actionType.PAUSE_SETTINGS\r\n  };\r\n};","/* ACTION TYPES */\r\n\r\nexport const UPDATE_INTERVALID_ACTION_TYPE = 'UPDATE_INTERVALID_ACTION_TYPE';\r\n\r\nexport const INCREMENT = 'INCREMENT';\r\n\r\nexport const DECREMENT = 'DECREMENT';\r\n\r\nexport const RESET = 'RESET';\r\n\r\nexport const START_STOP = \"START_STOP\";\r\n\r\nexport const COUNTDOWN = \"COUNTDOWN\";\r\n\r\nexport const SET_INTERVAL_ID = \"SET_INTERVAL_ID\";\r\n\r\nexport const RUN_TIMER = \"RUN_TIMER\";\r\n\r\nexport const PAUSE_TIMER = \"PAUSE_TIMER\";\r\n\r\nexport const PAUSE_SETTINGS = \"PAUSE_SETTINGS\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionType from '../actions/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n  break: 300,\r\n  userSetBreak: 300,\r\n  session: 1500,\r\n  userSetSession: 1500,\r\n  sessionTimerRunning: false,\r\n  timerPaused: true,\r\n  intervalId: \"\",\r\n  sessionType: \"session\"\r\n};\r\n\r\n/*  reducer called messageReducer() that handles the state for the messages.*/\r\nconst clockReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionType.INCREMENT:\r\n      if (action.timerType === \"session\") {\r\n        return {\r\n          ...state,\r\n          session: state.session === 3600 ? state.session : state.userSetSession + 60,\r\n          userSetSession: state.userSetSession === 3600 ? state.userSetSession : state.userSetSession + 60\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          break: state.break === 3600 ? state.break : state.userSetBreak + 60,\r\n          userSetBreak: state.userSetBreak === 3600 ? state.userSetBreak : state.userSetBreak + 60\r\n        }\r\n      }\r\n    case actionType.DECREMENT:\r\n      if (action.timerType === \"session\") {\r\n        return {\r\n          ...state,\r\n          session: state.session === 60 ? state.session : state.userSetSession - 60,\r\n          userSetSession: state.userSetSession === 60 ? state.userSetSession : state.userSetSession - 60\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          break: state.break === 60 ? state.break : state.userSetBreak - 60,\r\n          userSetBreak: state.userSetBreak === 60 ? state.userSetBreak : state.userSetBreak - 60\r\n        }\r\n      }\r\n    case actionType.RESET:\r\n      return {\r\n        ...initialState\r\n      }\r\n    case actionType.SET_INTERVAL_ID:\r\n      return {\r\n        ...state,\r\n        intervalId: action.intervalId\r\n      }\r\n    case actionType.PAUSE_SETTINGS:\r\n      return {\r\n        ...state,\r\n        sessionTimerRunning: false,\r\n        timerPaused: true\r\n      }\r\n    case actionType.START_STOP:\r\n      return {\r\n        ...state,\r\n        sessionTimerRunning: !state.sessionTimerRunning,\r\n        timerPaused: !state.timerPaused\r\n      }\r\n    case actionType.COUNTDOWN:\r\n      if (action.timerType === \"session\") {\r\n        return {\r\n          ...state,\r\n          session: state.session - 1\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          break: state.break - 1\r\n        }\r\n      }\r\n    case actionType.RUN_TIMER:\r\n      if (action.timerType === \"session\") {\r\n        return {\r\n          ...state,\r\n          sessionType: action.timerType,\r\n          sessionTimerRunning: true,\r\n          timerPaused: false,\r\n          break: state.userSetBreak\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          sessionType: action.timerType,\r\n          sessionTimerRunning: true,\r\n          timerPaused: false,\r\n          session: state.userSetSession\r\n        }\r\n      }\r\n    case actionType.PAUSE_TIMER:\r\n      if (action.timerType === \"session\") {\r\n        return {\r\n          ...state,\r\n          session: state.userSetSession,\r\n          intervalId: \"\",\r\n          sessionTimerRunning: false,\r\n          timerPaused: true,\r\n          sessionType: \"break\"\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          break: state.userSetBreak,\r\n          intervalId: \"\",\r\n          sessionTimerRunning: false,\r\n          timerPaused: true,\r\n          sessionType: \"session\"\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport default clockReducer;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport clockReducer from './reducers/clockReducer';\n\nconst enhancers = compose(\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n//create your Redux store and pass it the reducer\nconst store = createStore(\n  clockReducer,\n  enhancers\n);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}